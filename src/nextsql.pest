WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
s = _{ WHITESPACE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!("\r\n" | "\n") ~ ANY)*) }
bool_true = @{ "true" }
bool_false = @{ "false" }

ident = ${ !ASCII_DIGIT ~ (ASCII_ALPHANUMERIC | "_")+ }
wildcard = @{ "*" }
column = { wildcard | ident ~ "." ~ (wildcard | ident) | ident ~ !(("[" | "(")) }

add = @{ "+" }
subtract = @{ "-" }
multiply = @{ "*" }
divide = @{ "/" }
rem = @{ "%" }
power = @{ "^" }
lt = @{ "<" }
le = @{ "<=" }
gt = @{ ">" }
ge = @{ ">=" }
equal = @{ "==" }
unequal = @{ "!=" }
and = @{ "&&" }
or = @{ "||" }
not = @{ "!" }
dot = _{ "." }

number_seq = _{ ASCII_DIGIT+ }
numeric_literal = { number_seq ~ ("." ~ number_seq+)? }
string_literal = { "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
boolean_literal = { bool_false | bool_true }
object_literal = { "{" ~ s* ~ (ident ~ ":" ~ expression ~ (s* ~ "," ~ ident ~ ":" ~ expression)*) ~ ","? ~ "}" }
array_literal = { "[" ~ expression ~ (s* ~ "," ~ expression)* ~ "]" }
literal = { object_literal | array_literal | numeric_literal | string_literal | boolean_literal }
variable = { "$" ~ ident }
expression = { logical_expression }
logical_expression = { equality_expression ~ ((and | or) ~ equality_expression)* }
equality_expression = { relational_expression ~ ((equal | unequal) ~ relational_expression)* }
relational_expression = { additive_expression ~ ((le | ge | lt | gt) ~ additive_expression)* }
additive_expression = { multiplicative_expression ~ ((add | subtract) ~ multiplicative_expression)* }
multiplicative_expression = { unary_expression ~ ((multiply | divide | rem) ~ unary_expression)* }
unary_expression = { (not ~ atomic_expression) | atomic_expression }
call_expression = { ident ~ ("(" ~ ")" | "(" ~ expression ~ (s* ~ "," ~ expression)* ~ ")")}
index_access = { (call_expression | literal | variable | "(" ~ expression ~ ")") ~ ("[" ~ expression ~ "]")+ }
subquery = { "$(" ~ select_statement ~ ")" }
atomic_expression = { index_access | call_expression | subquery | column | literal | variable | "(" ~ expression ~ ")" }

alias = @{ "<" ~ ident ~ ">" }
target = @{ ident ~ alias? }
inner_join = @{ "><" }
left_join = @{ "<-" }
right_join = @{ "->" }
full_outer_join = @{ "<->" }
cross_join = @{ "*" }

join_type = { inner_join | left_join | right_join | full_outer_join | cross_join }
join_expr = { join_type ~ target ~ "," ~ expression }
from_expr = { target ~ join_expr* }
from_clause = { "from" ~ "(" ~ from_expr ~ ")" }

insert_clause = { "insert" ~ "(" ~ ident ~ ")" }
value_clause = { dot ~ "value" ~ "(" ~ expression ~ ")" }
values_clause = { dot ~ "values" ~ "(" ~ expression ~ (s* ~ "," ~ expression)* ~ ")" }

update_clause = { "update" ~ "(" ~ target ~ ")"}
set_clause = { dot ~ "set" ~ "(" ~ "{" ~ ident ~ ":" ~ expression ~ (s* ~ "," ~ ident ~ ":" ~ expression)* ~ "}" ~ ")"}

returning_clause = { dot ~ "returning" ~ "(" ~ column ~ (s* ~ "," ~ column)* ~ ")" }

where_clause = { dot ~ "where" ~ "(" ~ expression ~ ")" }
select_clause = { dot ~ "select" ~ "(" ~ expression ~ (s* ~ "," ~ expression)* ~ ")" }

i16_type = @{ "i16" }
i32_type = @{ "i32" }
i64_type = @{ "i64" }
f32_type = @{ "f32" }
f64_type = @{ "f64" }
timestamp_type = @{ "timestamp" }
timestamptz_type = @{ "timestamptz" }
date_type = @{ "date" }
uuid_type = @{ "uuid" }
string_type = @{ "string" }
bool_type = @{ "bool" }

question_mark = @{ "?" }
builtin_type = { i16_type | i32_type | i64_type | f32_type | f64_type | timestamptz_type | timestamp_type | date_type | uuid_type | string_type | bool_type }
user_defined_type = { ident }

insertable = { "Insertable" ~ "<" ~ type ~ ">" }
utility_type = { insertable }
array_type = { "[" ~ type ~ "]" }
type = { (array_type | builtin_type | utility_type | user_defined_type) ~ question_mark? }
argument = { variable ~ ":" ~ type }
argument_list = { "(" ~ ")" | "(" ~ argument ~ (s* ~ "," ~ argument)* ~ ")" }

select_statement = { from_clause ~ where_clause? ~ select_clause }

query_body = { "{" ~ select_statement ~ "}" }
query_decl = { "query" ~ ident ~ argument_list? }
query = { query_decl ~ query_body }

delete_clause = { "delete" ~ "(" ~ target ~ ")" }

mutation_decl = { "mutation" ~ ident ~ argument_list? }

mutation_body = { "{" ~ 
  (
      (insert_clause ~ (value_clause | values_clause) ~ returning_clause?)
    | (update_clause ~ where_clause? ~ set_clause ~ returning_clause?)
    | (delete_clause ~ where_clause? ~ returning_clause?)
  )
~ "}" }
mutation = { mutation_decl ~ mutation_body }

migration_decl = { "migration" ~ ident }
create_table_statement = { "createTable" ~ "(" ~ ident ~ "," ~ "{" ~ column_def ~ (s* ~ "," ~ column_def)* ~ "}" ~ ")" }


pk_constarint = @{ "pk" }
ondelete_mode = { "cascade" | "set null" | "restrict" }
onupdate_mode = { "cascade" | "set null" | "restrict" }
fk_option = { "onDelete" ~ ":" ~ ondelete_mode | "onUpdate" ~ ":" ~ onupdate_mode }
fk_options = { "{" ~ fk_option+ ~ "}" }
fk_constraint = { "fk" ~ "(" ~ column ~ "," ~ fk_options? ~ ")" }
constraint = { pk_constarint | fk_constraint }
column_def = { ident ~ ":" ~ type ~ ("," ~ constraint)? }

drop_table_statement = { "dropTable" ~ "(" ~ ident ~ ")" }

migration_statement = { create_table_statement | drop_table_statement }

up_block = { "up" ~ "{" ~ migration_statement* ~ "}" }
down_block = { "down" ~ "{" ~ migration_statement* ~ "}" }
migration_body = { "{" ~ up_block ~ down_block ~ "}" }
migration = { migration_decl ~ migration_body }

module = { SOI ~ (query | mutation)* ~ EOI }
