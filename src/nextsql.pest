WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
s = _{ WHITESPACE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!("\r\n" | "\n") ~ ANY)*) }
bool_true = @{ "true" }
bool_false = @{ "false" }

ident = ${ !ASCII_DIGIT ~ (ASCII_ALPHANUMERIC | "_")+ }
wildcard = @{ "*" }
column = { wildcard | ident ~ "." ~ (wildcard | ident) }

add = @{ "+" }
subtract = @{ "-" }
multiply = @{ "*" }
divide = @{ "/" }
rem = @{ "%" }
power = @{ "^" }
lt = @{ "<" }
le = @{ "<=" }
gt = @{ ">" }
ge = @{ ">=" }
equal = @{ "==" }
unequal = @{ "!=" }
and = @{ "&&" }
or = @{ "||" }
not = @{ "!" }
dot = _{ "." }

number_seq = _{ ASCII_DIGIT+ }
numeric_literal = @{ number_seq ~ ("." ~ number_seq+)? }
string_literal = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
boolean_literal = @{ bool_false | bool_true }
literal = @{ numeric_literal | string_literal | boolean_literal }
variable = @{ "$" ~ ident }
expression = { logical_expression }
logical_expression = { equality_expression ~ ((and | or) ~ equality_expression)* }
equality_expression = { relational_expression ~ ((equal | unequal) ~ relational_expression)* }
relational_expression = { additive_expression ~ ((le | ge | lt | gt) ~ additive_expression)* }
additive_expression = { multiplicative_expression ~ ((add | subtract) ~ multiplicative_expression)* }
multiplicative_expression = { unary_expression ~ ((multiply | divide | rem) ~ unary_expression)* }
unary_expression = { (not ~ atomic_expression) | atomic_expression }
atomic_expression = { column | literal | variable | "(" ~ expression ~ ")" }

alias = @{ "<" ~ ident ~ ">" }
target = @{ ident ~ alias? }
inner_join = @{ "><" }
left_join = @{ "<-" }
right_join = @{ "->" }
full_outer_join = @{ "<->" }
cross_join = @{ "*" }

join_type = { inner_join | left_join | right_join | full_outer_join | cross_join }
join_expr = { join_type ~ target ~ "," ~ expression }
from_expr = { target ~ join_expr* }
from_clause = { "from" ~ "(" ~ from_expr ~ ")" }

where_clause = { dot ~ "where" ~ expression }
select_clause = { dot ~ "select" ~ "(" ~ expression ~ (s* ~ "," ~ expression)* ~ ")" }

builtin_type = { "i16" | "i32" | "i64" | "f32" | "f64" | "timestamp" | "timestamptz" | "date" | "uuid" | "string" | "bool" }
type = @{ builtin_type }
argument = { variable ~ ":" ~ type }
argument_list = { "(" ~ ")" | "(" ~ argument ~ (s* ~ "," ~ argument)* ~ ")" }
query_body = { "{" ~ from_clause ~ where_clause? ~ select_clause ~ "}" }
query_decl = { "query" ~ ident ~ argument_list? }
query = { query_decl ~ query_body }

module = { SOI ~ query ~ EOI }
